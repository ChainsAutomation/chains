#!/usr/bin/env python2

from __future__ import absolute_import, division, print_function, unicode_literals

import sys, socket, ConfigParser, os
from chains.contrib.zeroconf import raw_input, ServiceBrowser, Zeroconf

#class ChainsFinder(object):
class ChainsFinder:

    def __init__(self, cfgpath):
        self.cfgpath = cfgpath

    def removeService(self, zeroconf, type, name):
        print("Service %s removed" % (name,))
        print('\n')

    def addService(self, zeroconf, type, name):
        print("Service %s added" % (name,))
        print("  Type is %s" % (type,))
        info = zeroconf.getServiceInfo(type, name)

        if info:

            z_addr     = socket.inet_ntoa(info.getAddress())
            z_port     = info.getPort()
            z_weight   = info.getWeight()
            z_priority = info.getPriority()
            z_props    = info.getProperties()
            z_server   = info.getServer()

            print("  Address is %s:%d" % (z_addr, z_port))
            print("  Weight is %d, Priority is %d" % (z_weight, z_priority))
            print("  Server is %s" % (z_server))
            print(str(z_props))
            # prop = info.getProperties()
            # if prop:
            #    print("  Properties are")
            #    for key, value in prop.items():
            #        print("    %s: %s" % (key, value))
            # print('Writing config file...')

            self.ensureParentDirs(self.cfgpath)
            cfgfile = open(self.cfgpath, 'w')

            Config = ConfigParser.ConfigParser()
            Config.add_section('main')
            Config.set('main', 'host', z_addr)
            Config.set('main', 'port', z_port)

            Config.write(cfgfile)
            cfgfile.close()

            print('Config file written')
        else:
            print("  No info")
        print('\n')

    def ensureParentDirs(self, path):
        dir = os.path.dirname(path)
        if not os.path.exists(dir):
            os.makedirs(dir)


if __name__ == '__main__':

    cfgfile = '/etc/chains/amqp.conf'
    if len(sys.argv) > 1:
        cfgfile = sys.argv[1]

    print("Finding chains master...")

    zeroconf = Zeroconf()
    listener = ChainsFinder(cfgfile)
    # browser = ServiceBrowser(zeroconf, "_http._tcp.local.", listener)
    browser = ServiceBrowser(zeroconf, "_amqp._tcp.local.", listener)

    try:
        raw_input("Waiting (press Enter to exit)...\n\n")
    finally:
        zeroconf.close()
